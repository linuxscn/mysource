package it.com.atlassian.jira.webtest.tests.just_confluence;

import com.atlassian.integrationtesting.runner.restore.Restore;
import com.atlassian.jira.functest.framework.suite.Category;
import com.atlassian.jira.functest.framework.suite.WebTest;
import com.atlassian.jira.pageobjects.model.DefaultIssueActions;
import com.atlassian.jira.pageobjects.pages.viewissue.ViewIssuePage;
import com.atlassian.jira.pageobjects.pages.viewissue.link.IssueLink;
import com.atlassian.jira.pageobjects.pages.viewissue.link.IssueLinkSection;
import com.atlassian.jira.pageobjects.pages.viewissue.linkissue.LinkIssueDialog;
import com.atlassian.jira.pageobjects.pages.viewissue.linkissue.SearchConfluenceDialog;
import com.atlassian.jira.webtest.webdriver.tests.common.BaseJiraWebTest;
import com.atlassian.pageobjects.TestedProductFactory;
import com.atlassian.webdriver.confluence.ConfluenceTestedProduct;
import com.atlassian.webdriver.confluence.page.ConfluenceLoginPage;
import com.google.common.collect.Iterables;
import it.com.atlassian.jira.webtest.pageobjects.applinks.OAuthConfirmPage;
import it.com.atlassian.jira.webtest.pageobjects.applinks.ViewApplinksPage;
import it.com.atlassian.jira.webtest.pageobjects.confluence.ConfluenceGeneralConfigPage;
import it.com.atlassian.jira.webtest.pageobjects.confluence.ConfluenceOAuthTokensPage;
import org.apache.commons.lang.StringUtils;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

/**
 * Tests issue links to Confluence pages.
 *
 * @since v5.0
 */
@WebTest ({ Category.WEBDRIVER_TEST, Category.ISSUE_LINKS })
@Restore ("TestConfluenceIssueLinks.xml")
public class TestConfluenceIssueLinks extends BaseJiraWebTest
{
    private static final String CONFLUENCE_APP_ID = "25276065-ca39-36fa-824f-8c6ba69ad142";

    private static final String PAGE_ID = "32784";
    private static final String PAGE_TITLE = "A note to Confluence administrators";
    private static final String PAGE_TITLE_URL_SUFFIX = "/display/ds/A+note+to+Confluence+administrators";
    private static final String PAGE_TINY_URL_SUFFIX = "/x/EI";
    private static final String PAGE_COMMENT_ID = "1802244";

    private static final String BLOG_POST_PAGE_ID = "1802242";
    private static final String BLOG_POST_TITLE = "A Blog Post";
    private static final String BLOG_POST_URL_SUFFIX = "/display/ds/2011/11/21/A+Blog+Post";
    private static final String BLOG_POST_TINY_URL_SUFFIX = "/x/AoAb";
    private static final String BLOG_POST_COMMENT_ID = "1802243";

    private ConfluenceTestedProduct confluence;

    private String confluenceServerBaseUrl;
    private String pageTitleUrl;
    private String pageIdUrl;
    private String pageTinyUrl;
    private String blogPostTitleUrl;
    private String blogPostIdUrl;
    private String blogPostTinyUrl;

    @Before
    public void setUp() throws Exception
    {
        confluence = TestedProductFactory.create(ConfluenceTestedProduct.class);

        // We need to get the Confluence server base URL, as it will be the display URL of the Conflunce app link,
        // and this will be the base URL of all URLs generated by the renderer.
        confluenceServerBaseUrl = getConfluenceServerBaseUrl();
        pageTitleUrl = confluenceServerBaseUrl + PAGE_TITLE_URL_SUFFIX;
        pageIdUrl = getPageIdUrl(confluenceServerBaseUrl, PAGE_ID);
        pageTinyUrl = confluenceServerBaseUrl + PAGE_TINY_URL_SUFFIX;
        blogPostTitleUrl = confluenceServerBaseUrl + BLOG_POST_URL_SUFFIX;
        blogPostIdUrl = getPageIdUrl(confluenceServerBaseUrl, BLOG_POST_PAGE_ID);
        blogPostTinyUrl = confluenceServerBaseUrl + BLOG_POST_TINY_URL_SUFFIX;
    }

    private String getConfluenceServerBaseUrl()
    {
        final ConfluenceLoginPage loginPage = confluence.gotoLoginPage();
        final ConfluenceGeneralConfigPage configPage;
        if (loginPage.isLoggedIn())
        {
            configPage = confluence.getPageBinder().navigateToAndBind(ConfluenceGeneralConfigPage.class);
        }
        else
        {
            configPage = loginPage.loginAsSysAdmin(ConfluenceGeneralConfigPage.class);
        }

        return configPage.getServerBaseUrl();
    }

    private String getPageIdUrl(final String baseUrl, final String pageId)
    {
        return baseUrl + "/pages/viewpage.action?pageId=" + pageId;
    }

    private String getCommentUrl(final String pageUrl, final String commentId)
    {
        final StringBuilder sb = new StringBuilder(pageUrl);
        if (pageUrl.contains("?"))
        {
            sb.append("&");
        }
        else
        {
            sb.append("?");
        }

        sb.append("focusedCommentId=").append(commentId);
        sb.append("#comment-").append(commentId);

        return sb.toString();
    }

    @Test
    public void testCreateConfluencePageLink_pageTitleUrl()
    {
        testCreateConfluenceLink("HSP-6", pageTitleUrl, PAGE_TITLE, pageTitleUrl);
    }

    @Test
    public void testCreateConfluencePageLink_pageIdUrl()
    {
        testCreateConfluenceLink("HSP-6", pageIdUrl, PAGE_TITLE, pageTitleUrl);
    }

    @Test
    public void testCreateConfluencePageLink_tinyUrl()
    {
        testCreateConfluenceLink("HSP-6", pageTinyUrl, PAGE_TITLE, pageTitleUrl);
    }

    @Test
    public void testCreateConfluencePageLink_invalidUrl()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final ViewIssuePage viewIssuePage = jira.goToViewIssue("HSP-6");

        assertTrue(invokeLinkIssue(viewIssuePage)
                .gotoConfluenceLink()
                .pageUrl("www.url.without.http.com")
                .submitExpectingError()
                .errorsPresent());
    }
    
    @Test
    public void testCreateConfluencePageLink_invalidPageId()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final ViewIssuePage viewIssuePage = jira.goToViewIssue("HSP-6");

        assertTrue(invokeLinkIssue(viewIssuePage)
                .gotoConfluenceLink()
                .pageUrl(getPageIdUrl(confluenceServerBaseUrl, "123456789"))
                .submitExpectingError()
                .errorsPresent());
    }

    @Test
    public void testCreateConfluencePageLink_invalidPageTitle()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final ViewIssuePage viewIssuePage = jira.goToViewIssue("HSP-6");

        assertTrue(invokeLinkIssue(viewIssuePage)
                .gotoConfluenceLink()
                .pageUrl(pageTitleUrl + "+adding+something+which+makes+an+invalid+page+title")
                .submitExpectingError()
                .errorsPresent());
    }

    @Test
    public void testCreateConfluencePageLink_pageTitleCommentUrl()
    {
        final String pageUrl = getCommentUrl(pageTitleUrl, PAGE_COMMENT_ID);
        testCreateConfluenceLink("HSP-6", pageUrl, PAGE_TITLE, pageTitleUrl);
    }

    @Test
    public void testCreateConfluencePageLink_pageIdCommentUrl()
    {
        final String pageUrl = getCommentUrl(pageIdUrl, PAGE_COMMENT_ID);
        testCreateConfluenceLink("HSP-6", pageUrl, PAGE_TITLE, pageTitleUrl);
    }

    @Test
    public void testCreateConfluencePageLink_tinyCommentUrl()
    {
        final String pageUrl = getCommentUrl(pageTinyUrl, PAGE_COMMENT_ID);
        testCreateConfluenceLink("HSP-6", pageUrl, PAGE_TITLE, pageTitleUrl);
    }

    @Test
    public void testCreateConfluenceBlogPostLink_blogTitleUrl()
    {
        testCreateConfluenceLink("HSP-6", blogPostTitleUrl, BLOG_POST_TITLE, blogPostTitleUrl);
    }

    @Test
    public void testCreateConfluenceBlogPostLink_pageIdUrl()
    {
        testCreateConfluenceLink("HSP-6", blogPostIdUrl, BLOG_POST_TITLE, blogPostTitleUrl);
    }

    @Test
    public void testCreateConfluenceBlogPostLink_tinyUrl()
    {
        testCreateConfluenceLink("HSP-6", blogPostTinyUrl, BLOG_POST_TITLE, blogPostTitleUrl);
    }

    @Test
    public void testCreateConfluenceBlogPostLink_blogTitleCommentUrl()
    {
        final String pageUrl = getCommentUrl(blogPostTitleUrl, BLOG_POST_COMMENT_ID);
        testCreateConfluenceLink("HSP-6", pageUrl, BLOG_POST_TITLE, blogPostTitleUrl);
    }

    @Test
    public void testCreateConfluenceBlogPostLink_pageIdCommentUrl()
    {
        final String pageUrl = getCommentUrl(blogPostIdUrl, BLOG_POST_COMMENT_ID);
        testCreateConfluenceLink("HSP-6", pageUrl, BLOG_POST_TITLE, blogPostTitleUrl);
    }

    @Test
    public void testCreateConfluenceBlogPostLink_tinyCommentUrl()
    {
        final String pageUrl = getCommentUrl(blogPostTinyUrl, BLOG_POST_COMMENT_ID);
        testCreateConfluenceLink("HSP-6", pageUrl, BLOG_POST_TITLE, blogPostTitleUrl);
    }

    private void testCreateConfluenceLink(final String issueKey, final String pageUrl, final String renderedTitle, final String renderedUrl)
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final ViewIssuePage viewIssuePage = jira.goToViewIssue(issueKey);

        invokeLinkIssue(viewIssuePage)
                .gotoConfluenceLink()
                .pageUrl(pageUrl)
                .submit();

        final IssueLink confluenceLink = getOnlyRemoteLink(viewIssuePage.getIssueLinkSection());
        assertLoadedSuccessfully(renderedTitle, renderedUrl, confluenceLink);
    }

    @Test
    public void testViewConfluenceLinkWithTrustedAppLink()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final IssueLink confluenceLink = getOnlyRemoteLink("HSP-1");
        assertLoadedSuccessfully(PAGE_TITLE, pageTitleUrl, confluenceLink);
    }

    @Test
    @Ignore ("This is a flakey test. The authentication URL sometimes redirects to /browse/undefined.")
    public void testViewConfluenceLinkWithOAuthAppLink()
    {
        deleteAllConfluenceAppLinks();
        createOAuthAppLink();
        revokeAllConfluenceOAuthTokens();

        IssueLinkSection issueLinkSection = getIssueLinkSection("HSP-1");

        IssueLink confluenceLink = getOnlyRemoteLink(issueLinkSection);
        assertFailedToLoad("http://localhost:1990/confluence/pages/viewpage.action?pageId=32784", confluenceLink);

        // Authenticate to see the Confluence page info
        issueLinkSection.authenticateLink(confluenceLink);
        pageBinder.bind(OAuthConfirmPage.class)
                .confirmHandlingWebLoginIfRequired("admin", "admin");

        // Re-bind the issue link section so that the page refresh is recognised
        issueLinkSection = pageBinder.bind(IssueLinkSection.class, "HSP-1");
        confluenceLink = getOnlyRemoteLink(issueLinkSection);
        assertLoadedSuccessfully(PAGE_TITLE, pageTitleUrl, confluenceLink);
    }

    @Test
    public void testViewLinkWithConfluenceServerDown()
    {
        assertFailedToLoad("HSP-2", "http://localhost:8080/confluence/pages/viewpage.action?pageId=1867778");
    }

    @Test
    public void testViewLinkToNonExistentConfluencePage()
    {
        createTrustedAppLink();
        assertFailedToLoad("HSP-3", "http://localhost:1990/confluence/pages/viewpage.action?pageId=123456789");
    }

    @Test
    public void testViewLinkToRestrictedConfluencePage()
    {
        assertFailedToLoad("HSP-4", "http://localhost:1990/confluence/pages/viewpage.action?pageId=1376262");
    }

    @Test
    public void testViewLinkToNonExistentAppLink()
    {
        assertFailedToLoad("HSP-5", "http://localhost:1990/confluence/pages/viewpage.action?pageId=12345");
    }

    @Test
    public void testDeleteExistingConfluenceLink()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final IssueLinkSection issueLinkSection = getIssueLinkSection("HSP-1");

        // Delete only link
        final IssueLink confluenceLink = getOnlyRemoteLink(issueLinkSection);
        issueLinkSection.deleteLink(confluenceLink).confirm();

        assertTrue(issueLinkSection.getLinks().isEmpty());
    }

    @Test
    public void testSearchConfluence_emptySearchTerm()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final ViewIssuePage viewIssuePage = jira.goToViewIssue("HSP-6");

        invokeLinkIssue(viewIssuePage)
                .gotoConfluenceLink()
                .searchForPage()
                .selectServer(CONFLUENCE_APP_ID)
                .searchText("")
                .search()
                .waitForInfoPresent();
    }

    @Test
    public void testSearchConfluence_trustedAppLink()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final ViewIssuePage viewIssuePage = jira.goToViewIssue("HSP-6");

        invokeLinkIssue(viewIssuePage)
                .gotoConfluenceLink()
                .searchForPage()
                .selectServer(CONFLUENCE_APP_ID)
                .searchText(PAGE_TITLE)
                .search()
                .selectResult(PAGE_TITLE)
                .submit();

        final IssueLink confluenceLink = getOnlyRemoteLink(viewIssuePage.getIssueLinkSection());
        assertLoadedSuccessfully(PAGE_TITLE, pageTitleUrl, confluenceLink);
    }

    @Test
    public void testSearchConfluence_noResults()
    {
        deleteAllConfluenceAppLinks();
        createTrustedAppLink();

        final ViewIssuePage viewIssuePage = jira.goToViewIssue("HSP-6");

        final SearchConfluenceDialog searchDialog = invokeLinkIssue(viewIssuePage)
                .gotoConfluenceLink()
                .searchForPage()
                .selectServer(CONFLUENCE_APP_ID)
                .searchText("asdfghjkl")
                .search();

        try
        {
            searchDialog.waitForInfoPresent();
        }
        finally
        {
            // Clean up so that the browser doesn't show a dialog asking if we want to navigate away from a dirty form
            searchDialog.searchText("");
        }
    }

    private LinkIssueDialog invokeLinkIssue(ViewIssuePage viewIssuePage)
    {
        viewIssuePage.getIssueMenu().invoke(DefaultIssueActions.LINK_ISSUE);
        return pageBinder.bind(LinkIssueDialog.class, viewIssuePage.getIssueKey());
    }

    private IssueLink getOnlyRemoteLink(final IssueLinkSection issueLinkSection)
    {
        final List<IssueLink> remoteLinks = issueLinkSection.getLinksForSource(IssueLinkSection.LinkSourceType.REMOTE);
        return Iterables.getOnlyElement(remoteLinks);
    }

    private IssueLink getOnlyRemoteLink(final String issueKey)
    {
        return getOnlyRemoteLink(getIssueLinkSection(issueKey));
    }

    private IssueLinkSection getIssueLinkSection(final String issueKey)
    {
        return jira.goToViewIssue(issueKey).getIssueLinkSection();
    }

    private void assertFailedToLoad(final String issueKey, final String expectedPageUrl)
    {
        final ViewIssuePage viewIssuePage = jira.gotoLoginPage()
                .loginAsSysAdmin(ViewIssuePage.class, issueKey);

        final List<IssueLink> remoteLinks = viewIssuePage
                .getIssueLinkSection()
                .getLinksForSource(IssueLinkSection.LinkSourceType.REMOTE);

        final IssueLink confluenceLink = Iterables.getOnlyElement(remoteLinks);

        assertFailedToLoad(expectedPageUrl, confluenceLink);
    }

    private void assertFailedToLoad(final String expectedPageUrl, final IssueLink confluenceLink)
    {
        assertEquals("Wiki Page", confluenceLink.getTitle());
        assertEquals(jira.getProductInstance().getBaseUrl() + "/images/icons/generic_link_16.png", confluenceLink.getIconUrl());
        assertEquals(expectedPageUrl, confluenceLink.getUrl());
        assertTrue(StringUtils.isBlank(confluenceLink.getSummary()));
        assertTrue(StringUtils.isBlank(confluenceLink.getPriorityIconUrl()));
        assertTrue(StringUtils.isBlank(confluenceLink.getStatus()));
    }

    private void assertLoadedSuccessfully(final String expectedTitle, final String expectedUrl, final IssueLink confluenceLink)
    {
        assertEquals(expectedTitle, confluenceLink.getTitle());
        assertEquals(confluenceServerBaseUrl + "/images/icons/favicon.png", confluenceLink.getIconUrl());
        assertEquals(expectedUrl, confluenceLink.getUrl());
        assertTrue(StringUtils.isBlank(confluenceLink.getSummary()));
        assertTrue(StringUtils.isBlank(confluenceLink.getPriorityIconUrl()));
        assertTrue(StringUtils.isBlank(confluenceLink.getStatus()));
    }

    private void deleteAllConfluenceAppLinks()
    {
        confluence.getPageBinder().navigateToAndBind(ViewApplinksPage.class).deleteAllAppLinks();
    }

    private void revokeAllConfluenceOAuthTokens()
    {
        confluence.getPageBinder().navigateToAndBind(ConfluenceOAuthTokensPage.class).revokeAllTokens();
    }

    private void createTrustedAppLink()
    {
        jira.gotoLoginPage()
                .loginAsSysAdmin(ViewApplinksPage.class)
                .createTrustedAppLink(jira.getProductInstance().getBaseUrl(),
                        confluence.getProductInstance().getBaseUrl(),
                        "admin", "admin");
    }

    private void createOAuthAppLink()
    {
        jira.gotoLoginPage()
                .loginAsSysAdmin(ViewApplinksPage.class)
                .createOAuthAppLink(jira.getProductInstance().getBaseUrl(),
                        confluence.getProductInstance().getBaseUrl(),
                        "admin", "admin");
    }
}
