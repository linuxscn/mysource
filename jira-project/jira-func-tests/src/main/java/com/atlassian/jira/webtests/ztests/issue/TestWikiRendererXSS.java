package com.atlassian.jira.webtests.ztests.issue;

import com.atlassian.jira.functest.framework.FuncTestCase;
import com.atlassian.jira.functest.framework.suite.Category;
import com.atlassian.jira.functest.framework.suite.WebTest;
import com.meterware.httpunit.WebLink;
import junit.framework.AssertionFailedError;
import org.xml.sax.SAXException;

/**
 * Test the links generated by the wiki renderer against various types of XSS attacks.
 *
 * @since v3.13
 */
@WebTest ({ Category.FUNC_TEST, Category.COMMENTS, Category.FIELDS })
public class TestWikiRendererXSS extends FuncTestCase
{
    // JRA-22199: XSS in {code} macro
    public void testCodeMacro()
    {
        administration.restoreData("TestWikiRendererXSSInLink.xml");
        navigation.issue().addComment("HSP-1", "{code:lang=x\"</pre><script>alert(1)</script>}xxx{code}", null);
        navigation.issue().viewIssue("HSP-1");
        final String xpath = "//div[@id='comment-10020']/div[1]//pre";
        // make sure the XSS isn't there
        assertions.assertNodeDoesNotHaveText(xpath, "alert(1)\">xxx");
        // make sure the real text is there
        assertions.assertNodeHasText(xpath, "xxx");
    }

    /**
     * JRA-15812: The Wiki link renderer assumes that the returned URL is correctly escaped. Passing an un-escaped URL allows
     * the user to perform an XSS attack by closing the link early and then embedding some Javascript. For instance, the link
     * [XSS|cool&quot; onclick=&quot;&gt;some bad javascript&lt;] would allow a user to execute some arbitrary
     * Javascript when the user clicked a link.
     */
    public void testXSSLinks()
    {
        administration.restoreData("TestWikiRendererXSSInLink.xml");

        navigation.issue().viewIssue("HSP-1");

        //these URLs should be escaped so that 'onclick' actually becomes part of the URL. Note that the URLs are
        //invalid, however, this is what the user enters so let them do what they want.
        assertLinkPresent("test email link", "mailto:whatever@broken.com\" onclick=\"alert('hi. I am a fun onclick event')");
        assertLinkPresent("test file link", "file:anything\" onclick=\"alert('hi. I am a fun onclick event')");
        assertLinkPresent("test http link", "http://www.atlassian.com\" onclick=\"alert('hi. I am a fun onclick event')");

        //a link to a user with a bad name. Note that in this case it is the URL encoding and not the HTML escaping
        //that is being used to protect against the XSS attack.
        assertLinkPresent("bad user", "secure/ViewProfile.jspa?name=bad%22+onclick%3Dalert%28%27bad%27%29");

        //a link to a bad attachment name should also be escaped. Note that in this case it is the URL encoding and not the HTML escaping
        //that is being used to protect against the XSS attack.
        assertLinkPresent("attachment xss", "secure/attachment/10000/10000_%23b+onclick%3Dalert%28%27b%27%29.png");

        //this link was already HTML escaped and should not be escaped twice.
        assertLinkPresent("escaped", "<escaped>");

        WebLink anchorLink = getLinkWithName("anchor");
        assertEquals("brenden\" onclick=\"alert('XSS')", anchorLink.getFragmentIdentifier());
    }

    private void assertLinkPresent(final String linkName, final String urlSuffix)
    {
        final WebLink webLink = getLinkWithName(linkName);
        assertTrue("Link should have ended with '" + urlSuffix + "' but actually was '" + webLink.getURLString() + "'",
                webLink.getURLString().endsWith(urlSuffix));
    }

    private WebLink getLinkWithName(final String linkName)
    {
        try
        {
            return tester.getDialog().getResponse().getLinkWith(linkName);
        }
        catch (SAXException e)
        {
            final AssertionFailedError error = new AssertionFailedError("Unable to read in document to find link with text'" + linkName + "'.");
            error.initCause(e);
            throw error;
        }
    }

}
