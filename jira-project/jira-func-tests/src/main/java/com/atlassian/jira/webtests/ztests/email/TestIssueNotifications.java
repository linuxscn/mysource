package com.atlassian.jira.webtests.ztests.email;

import java.io.IOException;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;

import com.atlassian.jira.functest.framework.UserProfile;
import com.atlassian.jira.functest.framework.UserProfileImpl;
import com.atlassian.jira.functest.framework.suite.Category;
import com.atlassian.jira.functest.framework.suite.WebTest;
import com.atlassian.jira.functest.framework.util.env.EnvironmentUtils;
import com.atlassian.jira.webtests.EmailFuncTestCase;

import com.google.common.collect.ImmutableList;
import com.icegreen.greenmail.util.GreenMailUtil;
import org.apache.commons.lang3.StringUtils;
import org.junit.Assert;

import static org.hamcrest.Matchers.containsString;

@WebTest ({ Category.FUNC_TEST, Category.EMAIL, Category.ISSUES })
public class TestIssueNotifications extends EmailFuncTestCase
{
    @Override
    public void tearDownTest()
    {
        backdoor.darkFeatures().disableForSite("jira.no.frother.reporter.field");
        super.tearDownTest();
    }

    @Override
    protected void configureAndStartSmtpServerWithNotify()
    {
        super.configureAndStartSmtpServerWithNotify();
        navigation.login("henry.ford");
        // A few of these tests assume the old default - easy to change it here
        navigation.userProfile().changeNotifyMyChanges(true);
        navigation.logout();
        navigation.login(ADMIN_USERNAME);
    }

    /**
     * delete a user while an notification generated by that user is still in the mail queue (i.e. has not been sent
     * yet).
     * <p/>
     * See JRA-15551
     */
    public void testDeleteUserBeforeCommentNotification() throws InterruptedException, MessagingException, IOException
    {
        administration.restoreData("TestIssueNotifications.xml");
        backdoor.darkFeatures().enableForSite("jira.no.frother.reporter.field");
        configureSmtpAndService();

        navigation.logout();
        navigation.login("henry.ford");

        navigation.issue().viewIssue("COW-2");
        tester.clickLink("footer-comment-button");
        tester.setFormElement("comment", "monkeys");
        tester.submit();
        //whe have to delete our comment to be able to delete usser
        tester.clickLink("delete_comment_10000");
        tester.submit("Delete");

        navigation.logout();
        navigation.login(ADMIN_USERNAME);

        navigation.issue().viewIssue("COW-1");
        tester.clickLink("edit-issue");
        // need to change reporter so we can delete the user
        tester.setFormElement("reporter", ADMIN_USERNAME);
        tester.submit("Update");
        navigation.gotoAdminSection("user_browser");
        navigation.webSudoAuthenticateUsingLastPassword();
        tester.clickLink("deleteuser_link_henry.ford");
        tester.submit("Delete");

        navigation.gotoAdmin();
        tester.clickLink("services");

        flushMailQueueAndWait(3);
        MimeMessage[] mimeMessages = mailService.getReceivedMessages();
        assertEquals(3, mimeMessages.length);

        assertEmailBodyContainsLine(mimeMessages[0], ".*henry.ford\\s.*commented.*");
        assertEmailBodyContainsLine(mimeMessages[0], ".*COW.*/.*COW-2.*");

        assertEmailBodyContainsLine(mimeMessages[1], ".*henry.ford\\s.*updated.*");
        assertEmailBodyContainsLine(mimeMessages[1], ".*COW.*/.*COW-2.*");
        assertEmailBodyContainsLine(mimeMessages[2], ".*admin.+\\s.*updated.*");
        assertEmailBodyContainsLine(mimeMessages[2], ".*COW.*/.*COW-1.*");

    }

    /**
     * delete the issue while a notification message for the message is still in the mail queue (i.e. has not been sent
     * yet).
     */
    public void testDeleteIssueBeforeCommentNotification() throws InterruptedException, MessagingException, IOException
    {
        EnvironmentUtils envUtils = new EnvironmentUtils(tester,getEnvironmentData(),navigation);
        if (envUtils.isOnWindows()) {
            //This is a f#cking cop out
            return;
        }

        administration.restoreData("TestIssueNotifications.xml");
        configureSmtpAndService();

        navigation.logout();
        navigation.login("henry.ford");

        navigation.issue().viewIssue("COW-1");
        tester.clickLink("footer-comment-button");
        tester.setFormElement("comment", "monkeys");
        tester.submit();

        navigation.logout();
        navigation.login(ADMIN_USERNAME);

        navigation.issue().viewIssue("COW-1");
        tester.clickLink("delete-issue");
        tester.submit("Delete");

        navigation.gotoAdminSection("services");
        navigation.webSudoAuthenticateUsingLastPassword();

        // two updates: comment + deletion. each update goes to two people: hank and admin. = 4 messages
        flushMailQueueAndWait(4);

        assertCommentAndDeleteMessages(getMessagesForRecipient("Henry.Ford@example.com"));
        assertCommentAndDeleteMessages(getMessagesForRecipient("admin@example.com"));
    }

    private void assertCommentAndDeleteMessages(List<MimeMessage> mimeMessages) throws IOException, MessagingException
    {
        assertEquals("messages received", 2, mimeMessages.size());
        assertEmailBodyContains(mimeMessages.get(0), "henry.ford");
        assertEmailBodyContainsLine(mimeMessages.get(0), ".*commented.*");
        assertEmailBodyContainsLine(mimeMessages.get(0), ".*COW.*/.*COW-1.*");
        assertEmailBodyContains(mimeMessages.get(1), "admin");
        assertEmailBodyContainsLine(mimeMessages.get(1), ".*deleted.*");
        assertEmailBodyContainsLine(mimeMessages.get(1), ".*COW.*/.*COW-1.*");
    }

    /*
     * JRA-14147: need to ensure notifications are correctly sent when deleting a sub task
     */
    public void testDeleteSubTaskNotification() throws InterruptedException, MessagingException, IOException
    {
        administration.restoreData("TestIssueNotifications.xml");
        configureSmtpAndService();

        //delete a sub task
        String issueId = "COW-3";
        navigation.issue().viewIssue(issueId);
        tester.clickLink("delete-issue");
        tester.submit("Delete");

        //there should be a single notification only, because of the issue's security level
        flushMailQueueAndWait(1);
        MimeMessage[] mimeMessages = mailService.getReceivedMessages();
        assertEquals(1, mimeMessages.length);

        MimeMessage message = mimeMessages[0];
        assertEquals("admin@example.com", message.getHeader("To")[0]);
        assertMailProperties(message, issueId, "[JIRATEST] (COW-3) A calf is a tasty little renet factory");
    }

    public void testDeleteIssueNotification() throws InterruptedException, MessagingException, IOException
    {
        administration.restoreData("TestIssueNotifications.xml");
        configureSmtpAndService();

        //delete an issue
        String issueId = "COW-1";
        navigation.issue().viewIssue(issueId);
        tester.clickLink("delete-issue");
        tester.submit("Delete");

        //there should 2 notifications, because of the issue's security level
        flushMailQueueAndWait(2);
        MimeMessage[] mimeMessages = mailService.getReceivedMessages();
        assertEquals(2, mimeMessages.length);

        // assert recipients of emails
        // note: as order is not guaranteed, need to create HashSets
        List<String> expectedList = ImmutableList.of("admin@example.com", "Henry.Ford@example.com");
        List<String> receivedList = ImmutableList.of(mimeMessages[0].getHeader("To")[0], mimeMessages[1].getHeader("To")[0]);
        assertEquals(new HashSet<String>(expectedList), new HashSet<String>(receivedList));

        assertMailProperties(mimeMessages[0], issueId, "[JIRATEST] (COW-1) The cow is in the pasture");
        assertMailProperties(mimeMessages[1], issueId, "[JIRATEST] (COW-1) The cow is in the pasture");
    }

// COMMENTED OUT BY SPUD, WHO WILL CHASE UP IF THIS FUNCTIONALITY IS STILL NEEDED -- mquail
//    public void testUserPreferencesUrlInHtml() throws InterruptedException, MessagingException
//    {
//        administration.restoreData("TestIssueNotifications.xml");
//        configureAndStartSmtpServerWithNotify();
//        navigation.gotoAdmin();
//        tester.clickLink("services");
//        navigation.webSudoAuthenticateUsingLastPassword();
//        tester.setFormElement("name", "");
//        tester.clickLink("edit_10000");
//        tester.setFormElement("delay", "100");
//        tester.submit("Update");
//
//        // change preferences to HTML format
//        tester.clickLink("view_profile");
//        tester.clickLink("edit_prefs_lnk");
//        tester.selectOption("userNotificationsMimeType", "HTML");
//        tester.submit();
//
//        // also change preferences for Henry.Ford
//        navigation.logout();
//        navigation.login("henry.ford");
//        tester.clickLink("view_profile");
//        tester.clickLink("edit_prefs_lnk");
//        tester.selectOption("userNotificationsMimeType", "HTML");
//        tester.submit();
//        navigation.logout();
//        navigation.login(ADMIN_USERNAME);
//
//        //delete an issue
//        String issueId = "COW-1";
//        navigation.issue().viewIssue(issueId);
//        tester.clickLink("delete-issue");
//        tester.submit("Delete");
//
//        //there should 2 notifications, because of the issue's security level
//        flushMailQueueAndWait(2);
//        MimeMessage[] mimeMessages = mailServices.getReceivedMessages();
//        assertEquals(2, mimeMessages.length);
//
//        // assert recipients of emails
//        // note: as order is not guaranteed, need to create HashSets
//        List expectedList = EasyList.build("admin@example.com", "Henry.Ford@example.com");
//        List receivedList = EasyList.build(mimeMessages[0].getHeader("To")[0], mimeMessages[1].getHeader("To")[0]);
//        assertEquals(new HashSet(expectedList), new HashSet(receivedList));
//
//        String body = GreenMailUtil.getBody(mimeMessages[0]);
//        String prefUrl = getPrefUrl(body);
//
//        //test profile links
//        System.out.println("body = " + body);
//        assertTrue("Profile link for admin could not be found.", body.indexOf("secure/ViewProfile.jspa?name=admin") >= 0);
//        assertTrue("Profile link for henry.ford could not be found.", body.indexOf("secure/ViewProfile.jspa?name=henry.ford") >= 0);
//        assertTrue("Profile link id for henry.ford could not be found.", body.indexOf("id=\"email_henry.ford\"") >= 0);
//        assertTrue("Profile link id for admin could not be found.", body.indexOf("id=\"email_admin\"") >= 0);
//
//    }

    public void testDeleteCommentNotification() throws InterruptedException, MessagingException, IOException
    {
        final String commentBody = "This comment will be deleted";
        final String emailSubject = "[JIRATEST] (COW-1) The cow is in the pasture";
        final UserProfile userProfile = new UserProfileImpl(tester, getEnvironmentData(), navigation);

        administration.restoreData("TestIssueNotifications.xml");
        configureSmtpAndService();

        // change admin's preferences to receive HTML emails
        userProfile.changeUserNotificationType(true);

        // add a comment to be deleted
        navigation.issue().viewIssue("COW-1");
        tester.clickLink("footer-comment-button");
        tester.setFormElement("comment", commentBody);
        tester.submit();
        tester.assertTextPresent(commentBody);
        tester.clickLink("delete_comment_10000");
        tester.submit("Delete");
        tester.assertTextNotPresent(commentBody);

        // there should be 2 notifications per person: admin should get the HTML version, henry.ford should get the
        // plaintext one
        flushMailQueueAndWait(4);
        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(2, messagesForAdmin.size());

//        for (Iterator iterator = messagesForAdmin.iterator(); iterator.hasNext();)
//        {
//            MimeMessage message = (MimeMessage) iterator.next();
//            String subject = message.getSubject();
//            // we only care about the "Updated" notification, not the "Commented" one
//            if (subject.indexOf("Updated") >= 0)
//            {
//                assertEmailSubjectEquals(message, emailSubject);
//                assertEmailBodyContains(message, "The following issue had a comment deleted.");
//                assertEmailBodyContains(message, commentBody);
//            }
//        }

        List<MimeMessage> messagesForHenry = getMessagesForRecipient("Henry.Ford@example.com");
        assertEquals(2, messagesForHenry.size());
        for (final MimeMessage message : messagesForHenry)
        {
            String subject = message.getSubject();
            // we only care about the "Updated" notification, not the "Commented" one
            if (subject.contains("Updated"))
            {
                assertEmailSubjectEquals(message, emailSubject);
                assertEmailBodyContains(message, "Comment: was deleted");
                assertEmailBodyContains(message, "(was: " + commentBody + ")");
            }
        }
    }

    public void testEditCommentNotification() throws InterruptedException, MessagingException, IOException
    {
        final String originalComment = "This text will be soon edited";
        final String newCommentAdmin = "The administrator just edited this text";
        final String newCommentAnon = "An anonymous user just edited this text";
        final String emailSubject = "[JIRATEST] (COW-1) The cow is in the pasture";

        // data import is essentially the same as TestIssueNotifications.xml, with minor changes:
        // * anonymous users are granted all permissions in the Default Permission Scheme
        // * admin user's full name was changed to "Administrator"
        administration.restoreData("TestIssueNotificationsAnonymous.xml");
        configureSmtpAndService();

        // add a comment with Henry.Ford
        editIssue(originalComment, "henry.ford", "COW-1", "footer-comment-button");

        // edit the comment with Admin
        editIssueInForm("admin", "COW-1", "edit_comment_10000", "comment-edit", newCommentAdmin);

        // edit the comment again with anonymous user
        editIssueInForm(null, "COW-1", "edit_comment_10000", "comment-edit", newCommentAnon);

        // there should be 3 notifications per person, we don't care about the particular recipient however
        navigation.login(ADMIN_USERNAME);
        flushMailQueueAndWait(6);
        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(3, messagesForAdmin.size());
        for (final MimeMessage message : messagesForAdmin)
        {
            String subject = message.getSubject();
            // we only care about the "Comment Edited" notification, not the "Commented" one
            // one of these will be for Admin's edit, the other for Anonymous' edit
            if (subject.contains("Edited"))
            {
                assertEmailSubjectEquals(message, emailSubject);
                final String from = message.getFrom()[0].toString();
                if (from.contains(ADMIN_FULLNAME))
                {
                    assertEmailBodyContains(message, ADMIN_FULLNAME + " edited comment on COW-1 at");
                    assertEmailBodyContains(message, newCommentAdmin);
                    assertEmailBodyContains(message, originalComment);
                    assertEmailBodyDoesntContain(message, newCommentAnon);
                }
                else
                {
                    assertEmailBodyContains(message, "Anonymous edited comment on COW-1 at");
                    assertEmailBodyContains(message, newCommentAnon);
                    assertEmailBodyContains(message, newCommentAdmin);
                    assertEmailBodyDoesntContain(message, originalComment);
                }
            }
        }
    }

    public void testEditCommentWithNewlineSendsEmailWithCorrectNumberOfNewlines() throws InterruptedException, MessagingException, IOException
    {
        final String originalComment = "And now, for something\n\ncompletely different";
        final String newCommentAdmin = "And now, for something\r\n\r\ncompletely different - The Larch";

        administration.restoreData("TestIssueNotificationsAnonymous.xml");
        configureSmtpAndService();

        // add a comment with Henry.Ford
        editIssue(originalComment, "henry.ford", "COW-1", "footer-comment-button");

        // edit the comment with Admin
        editIssueInForm("admin", "COW-1", "edit_comment_10000", "comment-edit", newCommentAdmin);

        navigation.login(ADMIN_USERNAME);
        // 2 for reporter 2 for assignee
        flushMailQueueAndWait(4);
        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(2, messagesForAdmin.size());

        final Iterator<MimeMessage> iterator = messagesForAdmin.iterator();
        // henry.ford commented on
        Assert.assertThat("Comment created notification ok", GreenMailUtil.getBody(iterator.next()), containsString("And now, for something<br /> <br /> completely different"));

        // Administrator edited a comment
        final String body = GreenMailUtil.getBody(iterator.next());
        int start = body.indexOf("something");
        int end = body.indexOf("Larch");
        if (start == -1 || end == -1 || start >= end)
        {
            // can't find the unchanged and added text
            logEmail(body);
            fail("Incorrect notification email received, cannot find edited comment body.");
        }
        final String substring = body.substring(start, end);
        long brTagsCountBetweenFirstAndLastCommentLine = StringUtils.countMatches(substring, "<br");

        if (brTagsCountBetweenFirstAndLastCommentLine != 2)
        {
            logEmail(body);
            fail("There should be exactly 2 newlines in email notification, got " + brTagsCountBetweenFirstAndLastCommentLine + " instead");
        }
    }

    private void logEmail(final String body)
    {
        log("Email body start");
        log(body);
        log("Email body end");
    }

    private void editIssueInForm(final String userName, final String issueKey, final String linkId, final String workingFormName, final String newComment)
    {
        navigation.logout();
        if (userName != null)
        {
            navigation.login(userName);
        }
        else
        {
            tester.gotoPage("/secure/Dashboard.jspa");
        }
        navigation.issue().viewIssue(issueKey);
        tester.clickLink(linkId);
        tester.setWorkingForm(workingFormName);
        tester.setFormElement("comment", newComment);
        tester.submit("Save");
        tester.assertTextPresent(addBRforNewline(newComment));
    }

    private void editIssue(String originalComment, final String userName, final String issueKey, final String linkId)
    {
        navigation.logout();
        navigation.login(userName);
        navigation.issue().viewIssue(issueKey);
        tester.clickLink(linkId);
        tester.setFormElement("comment", originalComment);
        tester.submit();
        tester.assertTextPresent(addBRforNewline(originalComment));
    }

    private String addBRforNewline(final String multiLineText)
    {
        return multiLineText.replaceAll("\n", "<br/>\n");
    }

    public void testAnonymousUser() throws InterruptedException, MessagingException, IOException
    {
        final String originalComment = "a comment from henry";

        // data import is essentially the same as TestIssueNotifications.xml, with minor changes:
        // * anonymous users are granted all permissions in the Default Permission Scheme
        // * admin user's full name was changed to "Administrator"
        // * henry.ford's full name was changed to "" (blank)
        administration.restoreData("TestIssueNotificationsNoName.xml");
        configureSmtpAndService();

        // add a comment with an anonymous user
        navigation.logout();
        tester.gotoPage("/secure/Dashboard.jspa");
        navigation.issue().viewIssue("COW-1");
        tester.clickLink("footer-comment-button");
        tester.setFormElement("comment", originalComment);
        tester.submit();
        tester.assertTextPresent(originalComment);

        // add a comment with henry.ford
        navigation.logout();
        navigation.login("henry.ford");
        navigation.issue().viewIssue("COW-1");
        tester.clickLink("footer-comment-button");
        tester.setFormElement("comment", originalComment);
        tester.submit();
        tester.assertTextPresent(originalComment);

        navigation.login(ADMIN_USERNAME);
        flushMailQueueAndWait(2);
        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(2, messagesForAdmin.size());

        // check naming fallback logic worked
        final String emailBody = GreenMailUtil.getBody(messagesForAdmin.get(0));

        // Due to a failing TPM build on 7/1/2011 I'm adding this logic. Instead of assuming that the notifications
        // come out in the order they are performed we check both ways. If this passes then the next step is to figure
        // out why TPM is sending out notifications in the opposite order from every other build we have.
        if (emailBody.contains("Anonymous"))
        {
            assertEmailBodyContains(messagesForAdmin.get(1), "henry.ford");
            assertEmailBodyContains(messagesForAdmin.get(1), "commented");
            assertEmailBodyContains(messagesForAdmin.get(1), "COW-1");
        }
        else
        {
            assertEmailBodyContains(messagesForAdmin.get(0), "henry.ford");
            assertEmailBodyContains(messagesForAdmin.get(0), "commented");
            assertEmailBodyContains(messagesForAdmin.get(0), "COW-1");

            assertEmailBodyContains(messagesForAdmin.get(1), "Anonymous");
            assertEmailBodyContains(messagesForAdmin.get(1), "commented");
            assertEmailBodyContains(messagesForAdmin.get(1), "COW-1");
        }
    }

    private void configureSmtpAndService()
    {
        configureAndStartSmtpServerWithNotify();
        navigation.gotoAdmin();
        tester.clickLink("services");
        navigation.webSudoAuthenticateUsingLastPassword();
        tester.setFormElement("name", "");
        tester.clickLink("edit_10000");
        tester.setFormElement("delay", "100");
        tester.submit("Update");
    }

    public void testAssignIssueNotificationNoCurrentAssignee() throws Exception
    {
        administration.restoreData("TestIssueNotificationsNotCurrentAssignee.xml");
        configureSmtpAndService();
        try
        {
            backdoor.darkFeatures().enableForSite("no.frother.assignee.field");
            navigation.issue().assignIssue("COw-2", "this is a comment", "henry.ford");
        }
        finally
        {
            backdoor.darkFeatures().disableForSite("no.frother.assignee.field");
        }

        flushMailQueueAndWait(0);
        List<MimeMessage> messagesForHank = getMessagesForRecipient("Henry.Ford@example.com");
        assertEquals(0, messagesForHank.size());

        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(0, messagesForAdmin.size());
    }

    // current assignee sends to both
    public void testAssignIssueNotificationCurrentAndPreviousAssignee() throws Exception
    {
        administration.restoreData("TestIssueNotificationsCurrentAssignee.xml");
        configureSmtpAndService();
        try
        {
            backdoor.darkFeatures().enableForSite("no.frother.assignee.field");
            navigation.issue().assignIssue("COw-2", "this is a comment", "henry.ford");
        }
        finally
        {
            backdoor.darkFeatures().disableForSite("no.frother.assignee.field");
        }

        flushMailQueueAndWait(2);

        List<MimeMessage> messagesForHank = getMessagesForRecipient("Henry.Ford@example.com");
        assertEquals(1, messagesForHank.size());

        MimeMessage message = messagesForHank.get(0);
        assertEmailBodyContains(message, "assigned");

        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(1, messagesForAdmin.size());

        message = messagesForAdmin.get(0);
        assertEmailBodyContains(message, "assigned");
    }

    // current assignee sends to just previous (current=null)
    public void testAssignIssueNotificationUnassigned() throws Exception
    {
        administration.restoreData("TestIssueNotificationsCurrentAssignee.xml");
        configureAndStartSmtpServerWithNotify();
        administration.generalConfiguration().setAllowUnassignedIssues(true);
        try
        {
            backdoor.darkFeatures().enableForSite("no.frother.assignee.field");
            navigation.issue().unassignIssue("COW-2", "this is a comment");
        }
        finally
        {
            backdoor.darkFeatures().disableForSite("no.frother.assignee.field");
        }

        flushMailQueueAndWait(1);

        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(1, messagesForAdmin.size());

        MimeMessage message = messagesForAdmin.get(0);
        assertEmailBodyContains(message, "assigned");

    }

    public void testResolutionDateInEmail() throws InterruptedException, MessagingException, IOException
    {
        administration.restoreData("TestIssueNotifications.xml");
        configureSmtpAndService();

         // change preferences to HTML format since resolution date is only shown in HTML e-mails
        tester.clickLink("view_profile");

        tester.clickLink("edit_prefs_lnk");
        tester.selectOption("userNotificationsMimeType", "HTML");
        tester.submit();

        //first comment on issue COW-1.  This should send an e-mail without the resolution date.
        navigation.issue().viewIssue("COW-1");
        tester.clickLink("footer-comment-button");
        tester.setWorkingForm("comment-add");
        tester.setFormElement("comment", "Test comment");
        tester.submit("Add");

        //then resolve the issue.  This should send an e-mail with th resolution date.
        tester.clickLink("action_id_5");
        tester.setWorkingForm("issue-workflow-transition");
        tester.submit("Transition");

        flushMailQueueAndWait(2);

        List<MimeMessage> messagesForAdmin = getMessagesForRecipient("admin@example.com");
        assertEquals(2, messagesForAdmin.size());
        MimeMessage message = messagesForAdmin.get(0);
        assertEmailBodyDoesntContain(message, "Resolved:");
        assertEmailBodyContains(message, "commented");

        MimeMessage resolvedMessage = messagesForAdmin.get(1);
        assertEmailBodyContains(resolvedMessage, "Resolved");
    }

    /**
     *  For  JRA-23390
     */
    public void testMailOrdering() throws Exception
    {
        final String originalComment = "This text will be soon edited";
        final String newCommentAdmin = "The administrator just edited this text";
        final String newCommentAnon = "An anonymous user just edited this text";

        administration.restoreData("TestIssueNotificationsAnonymous.xml");
        configureSmtpAndService();

        // add a comment with Henry.Ford
        editIssue(originalComment, "henry.ford", "COW-1", "footer-comment-button");

        // edit the comment with Admin
        editIssueInForm("admin", "COW-1", "edit_comment_10000", "comment-edit", newCommentAdmin);

        // edit the comment again with anonymous user
        editIssueInForm(null, "COW-1", "edit_comment_10000", "comment-edit", newCommentAnon);

        navigation.login(ADMIN_USERNAME);
        flushMailQueueAndWait(6);

        MimeMessage[] messages = mailService.getReceivedMessages();
        assertEquals(6,messages.length);
        Date firstDate = messages[0].getSentDate();
        boolean notInOrder = false;
        for (MimeMessage message : messages) {
            notInOrder = message.getSentDate().before(firstDate);
        }
        assertFalse(notInOrder);
    }

    private void assertMailProperties(MimeMessage message, String issueId, String subject)
            throws MessagingException, IOException
    {
        assertEquals(subject, message.getHeader("Subject")[0]);
        assertEquals("\"admin (JIRA)\" <jiratest@atlassian.com>", message.getHeader("From")[0]);
        assertEmailBodyContains(message, "admin");
        assertEmailBodyContainsLine(message, ".*deleted.*");
        assertEmailBodyContainsLine(message, ".*" + issueId + ".*");
    }
}
