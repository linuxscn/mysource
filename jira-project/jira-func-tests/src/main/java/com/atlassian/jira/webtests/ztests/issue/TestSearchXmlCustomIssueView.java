package com.atlassian.jira.webtests.ztests.issue;

import com.atlassian.jira.functest.framework.suite.Category;
import com.atlassian.jira.functest.framework.suite.WebTest;

import electric.xml.Document;

import org.apache.commons.lang3.StringEscapeUtils;
import org.w3c.dom.Node;

/**
 * Tests XML Issue view for escaping chars, present nodes, etc.
 */
@WebTest ({ Category.FUNC_TEST, Category.ISSUES })
public class TestSearchXmlCustomIssueView extends TestXmlCustomIssueView
{
    public TestSearchXmlCustomIssueView(String name)
    {
        super(name);
    }

    @Override
    protected String getHSP1ViewPage(final String fieldParam)
    {
        return "/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?pid=10000&resolution=1&sorter/field=issuekey&sorter/order=ASC&tempMax=1000&" + fieldParam;
    }

    @Override
    protected String getHSP2ViewPage(final String fieldParam)
    {
        return "/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?type=1&pid=10000&resolution=-1&sorter/field=issuekey&sorter/order=ASC&tempMax=1000&" + fieldParam;
    }

    @Override
    protected String getHSP3ViewPage(final String fieldParam)
    {
        return "/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml?type=5&pid=10000&sorter/field=issuekey&sorter/order=ASC&tempMax=1000&" + fieldParam;
    }

    public void testXMLCommentsOfResults() throws Exception
    {
        restoreData("TestXMLIssueCustomView.xml");
        _testXMLCommentOfResults(getHSP1ViewPage(""));
        _testXMLCommentOfResults(getHSP1ViewPage("blah=value"));
        _testXMLCommentOfResults("/sr/jira.issueviews:searchrequest-xml/temp/SearchRequest.xml");
    }

    public void _testXMLCommentOfResults(final String url) throws Exception
    {
        gotoPage(url);
        assertEquals("text/xml", getDialog().getResponse().getContentType());
        Document doc = getDocument();

        log("Checking the contents of the XML comment of the XML resulsts");

        final Node commentNode = doc.getFirstChild();
        assertNotNull(commentNode);
        assertEquals(Node.COMMENT_NODE, commentNode.getNodeType());
        final String commentText = commentNode.getNodeValue();
        assertNotNull(commentText);
        assertTrue(commentText.indexOf("RSS generated by JIRA") > -1);
        assertTrue(commentText.indexOf("It is possible to restrict the fields that are returned in this document by specifying the 'field' parameter in your request.\n"
                + "For example, to request only the issue key and summary add field=key&field=summary to the URL of your request.") > -1);

        String expectedUrl = getEnvironmentData().getBaseUrl() + url;

        if (expectedUrl.indexOf("?") > -1)
        {
            expectedUrl += (expectedUrl.endsWith("&") ? "" : "&") + "field=key&field=summary";
        }
        else
        {
            expectedUrl += "?field=key&field=summary";
        }

        assertTrue(commentText.indexOf(StringEscapeUtils.escapeXml(expectedUrl)) > -1);
    }
}