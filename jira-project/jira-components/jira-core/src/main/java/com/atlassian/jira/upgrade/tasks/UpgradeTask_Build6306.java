package com.atlassian.jira.upgrade.tasks;

import java.util.HashSet;
import java.util.Set;

import com.atlassian.jira.entity.EntityEngine;
import com.atlassian.jira.entity.EntityListConsumer;
import com.atlassian.jira.entity.Select;
import com.atlassian.jira.upgrade.AbstractUpgradeTask;

import org.ofbiz.core.entity.GenericValue;

import static com.atlassian.jira.entity.Delete.from;

/**
 * Removes orphaned and incorrect mappings generated by UpgradeTask_Build6123
 *
 * @since v6.2
 */
public class UpgradeTask_Build6306 extends AbstractUpgradeTask
{
    private static final String DRAFT_WORKFLOW_SCHEME_ENTITY = "DraftWorkflowSchemeEntity";
    private final EntityEngine entityEngine;

    private EntityListConsumer<GenericValue,Set<Long>> idCollector = new EntityListConsumer<GenericValue, Set<Long>>()
    {
        private Set<Long> result = new HashSet<Long>();

        @Override
        public void consume(final GenericValue entity)
        {
            result.add(entity.getLong("id"));
        }

        @Override
        public Set<Long> result()
        {
            return result;
        }
    };

    public UpgradeTask_Build6306(EntityEngine entityEngine)
    {
        super(false);
        this.entityEngine = entityEngine;
    }

    @Override
    public String getBuildNumber()
    {
        return "6306";
    }

    @Override
    public String getShortDescription()
    {
        return "Removes orphaned mappings generated by upgrade task 6123";
    }

    @Override
    public void doUpgrade(final boolean setupMode) throws Exception
    {
        Set<Long> draftSchemeIds = Select.columns("id").from("DraftWorkflowScheme").runWith(entityEngine).consumeWith(idCollector);
        for (GenericValue entity : Select.columns("id", "scheme").from(DRAFT_WORKFLOW_SCHEME_ENTITY).runWith(entityEngine).asList())
        {
            final long entityId = entity.getLong("id");
            final long schemeId = entity.getLong("scheme");
            if (!draftSchemeIds.contains(schemeId))
            {
                entityEngine.delete(from(DRAFT_WORKFLOW_SCHEME_ENTITY).whereIdEquals(entityId));
            }
        }
    }
}
