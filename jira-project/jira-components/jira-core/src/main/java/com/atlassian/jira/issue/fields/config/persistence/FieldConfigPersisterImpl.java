package com.atlassian.jira.issue.fields.config.persistence;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.Map;

import com.atlassian.core.util.collection.EasyList;
import com.atlassian.core.util.map.EasyMap;
import com.atlassian.jira.component.ComponentAccessor;
import com.atlassian.jira.entity.EntityUtils;
import com.atlassian.jira.exception.DataAccessException;
import com.atlassian.jira.issue.fields.ConfigurableField;
import com.atlassian.jira.issue.fields.CustomField;
import com.atlassian.jira.issue.fields.config.FieldConfig;
import com.atlassian.jira.issue.fields.config.FieldConfigImpl;
import com.atlassian.jira.issue.fields.config.FieldConfigItemType;
import com.atlassian.jira.ofbiz.OfBizDelegator;
import com.atlassian.jira.util.map.NotNullHashMap;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.collection.CompositeCollection;
import org.ofbiz.core.entity.GenericEntityException;
import org.ofbiz.core.entity.GenericValue;

public class FieldConfigPersisterImpl implements FieldConfigPersister
{
    // --------------------------------------------------------------------------------------------------- Entity Fields

    private static final String ENTITY_TABLE_NAME = "FieldConfiguration";

    public static final String ENTITY_ID = "id";
    public static final String ENTITY_NAME = "name";
    public static final String ENTITY_DESCRIPTION = "description";
    public static final String ENTITY_FIELD = "fieldid";

    // ---------------------------------------------------------------------------------------------------- Dependencies

    private final OfBizDelegator delegator;

    // ---------------------------------------------------------------------------------------------------- Constructors

    public FieldConfigPersisterImpl(final OfBizDelegator delegator)
    {
        this.delegator = delegator;
    }

    // ----------------------------------------------------------------------------------------------- Interface Methods

    public FieldConfig create(final FieldConfig config, final List<FieldConfigItemType> configurationItemTypes)
    {
        final Map fields = transformToFieldsMap(config);

        final GenericValue createdGV = EntityUtils.createValue(ENTITY_TABLE_NAME, fields);
        return transformToDomainObject(createdGV, configurationItemTypes);
    }

    public FieldConfig createWithDefaultValues(final ConfigurableField field)
    {
        final String name = "Default Configuration for " + field.getName();
        final String description = "Default configuration generated by JIRA";
        final FieldConfig config = new FieldConfigImpl(null, name, description, Collections.EMPTY_LIST, field.getId());
        return create(config, field.getConfigurationItemTypes());
    }

    public FieldConfig update(final FieldConfig config)
    {
        try
        {
            final GenericValue gv = findById(config.getId());

            final Map fields = transformToFieldsMap(config);
            gv.setNonPKFields(fields);
            gv.store();

            final CustomField customField = config.getCustomField();

            return transformToDomainObject(gv, customField.getConfigurationItemTypes());
        }
        catch (final GenericEntityException e)
        {
            throw new DataAccessException("Unable to store FieldConfig: " + config, e);
        }
    }

    public void remove(final FieldConfig config)
    {
        removeImpl(config.getId());
    }

    private void removeImpl(final Long id)
    {
        delegator.removeValue(findById(id));
    }

    public Collection<FieldConfig> getConfigsExclusiveToConfigScheme(final Long fieldConfigSchemeId)
    {
        // find FieldConfigs that belong only to this FieldConfigScheme Note: while there is a FieldConfigScheme#getOneAndOnlyConfig() method, we are
        // taking a defensive approach here by ensuring there is only FieldConfigScheme mapped to this FieldConfig before we remove it.

        /**
         * responsible for identifying FieldConfigs exclusively mapped to a Scheme
         */
        class ExclusiveConfigFinder
        {
            private static final String MAPPING_TABLE = "FieldConfigSchemeIssueType";
            private static final String SCHEME_COLUMN = "fieldconfigscheme";
            private static final String CONFIG_COLUMN = "fieldconfiguration";

            private final List/* <Long> */delete = new ArrayList();
            private final List/* <Long> */ignore = new ArrayList();
            private final Collection alreadyProcessed = new CompositeCollection(new Collection[]
            { delete, ignore });

            Collection<FieldConfig> process()
            {
                final List<GenericValue> fieldConfigSchemeIssueTypeMappings = delegator.findByAnd(MAPPING_TABLE, EasyMap.build(SCHEME_COLUMN, fieldConfigSchemeId));
                for (final GenericValue fieldConfigSchemeIssueTypeGV : fieldConfigSchemeIssueTypeMappings)
                {
                    add(fieldConfigSchemeIssueTypeGV.getLong(CONFIG_COLUMN));
                }
                CollectionUtils.transform(delete, new Transformer/* <Long, FieldConfig> */()
                {
                    public/* FieldConfig */Object transform(/* Long */Object input)
                    {
                        return getFieldConfig((Long) input);
                    }
                });
                return Collections.unmodifiableCollection(delete);
            }

            private void add(final Long configId)
            {
                // ignore if already processed
                if (alreadyProcessed.contains(configId))
                {
                    return;
                }
                if (fieldConfigIsExclusiveToScheme(configId))
                {
                    delete.add(configId);
                }
                else
                {
                    ignore.add(configId);
                }
            }

            private boolean fieldConfigIsExclusiveToScheme(final Long configId)
            {
                final List<GenericValue> specificConfigs = delegator.findByAnd(MAPPING_TABLE, EasyMap.build(CONFIG_COLUMN, configId));
                for (final GenericValue fieldConfigIssueType : specificConfigs)
                {
                    if (!fieldConfigSchemeId.equals(fieldConfigIssueType.getLong(SCHEME_COLUMN)))
                    {
                        return false;
                    }
                }
                return true;
            }
        }

        return new ExclusiveConfigFinder().process();
    }

    public FieldConfig getFieldConfig(final Long configId)
    {
        final GenericValue gv = findById(configId);
        final ConfigurableField field = ComponentAccessor.getFieldManager().getConfigurableField(gv.getString(ENTITY_FIELD));
        return transformToDomainObject(gv, field == null ? Collections.EMPTY_LIST : field.getConfigurationItemTypes());
    }

    public FieldConfig getFieldConfig(final Long configId, final ConfigurableField field)
    {
        final GenericValue gv = findById(configId);
        if (gv != null)
        {
            return transformToDomainObject(gv, field.getConfigurationItemTypes());
        }
        return null;
    }

    public List getConfigForField(final ConfigurableField field)
    {
        final List configs = getConfigGvsForCustomField(field);

        CollectionUtils.transform(configs, new Transformer()
        {
            public Object transform(final Object input)
            {
                return transformToDomainObject((GenericValue) input, field.getConfigurationItemTypes());
            }
        });
        return configs;
    }

    // ------------------------------------------------------------------------------------------
    // Transformation Methods

    private Map transformToFieldsMap(final FieldConfig config)
    {
        final Map fields = new NotNullHashMap();

        fields.put(ENTITY_ID, config.getId());
        fields.put(ENTITY_NAME, config.getName());
        fields.put(ENTITY_DESCRIPTION, config.getDescription());
        fields.put(ENTITY_FIELD, config.getFieldId());
        return fields;
    }

    private FieldConfig transformToDomainObject(final GenericValue createdGV, final List<FieldConfigItemType> configurationItemTypes)
    {
        final Long id = createdGV.getLong(ENTITY_ID);
        final String name = createdGV.getString(ENTITY_NAME);
        final String desc = createdGV.getString(ENTITY_DESCRIPTION);
        final String fieldId = createdGV.getString(ENTITY_FIELD);

        return new FieldConfigImpl(id, name, desc, configurationItemTypes, fieldId);
    }

    private List getConfigGvsForCustomField(final ConfigurableField field)
    {
        final Map fields = EasyMap.build(ENTITY_FIELD, field.getId());
        final List sortBy = EasyList.build(ENTITY_ID);
        return delegator.findByAnd(ENTITY_TABLE_NAME, fields, sortBy);
    }

    private GenericValue findById(final Long configId)
    {
        return delegator.findById(ENTITY_TABLE_NAME, configId);
    }
}