<?xml version="1.0" encoding="UTF-8" ?>

<Module>
    <ModulePrefs title="__MSG_gadget.assignedtome.title__" directory_title="__MSG_gadget.assignedtome.title__"
                 description="__MSG_gadget.assignedtome.description__"
                 author="Atlassian" author_affiliation="Atlassian"
                 author_location="Sydney, Australia" height="100"
                 screenshot='#staticResourceUrl("com.atlassian.jira.gadgets:assigned-to-me-gadget", "filterResults-screenshot.png")'
                 thumbnail='#staticResourceUrl("com.atlassian.jira.gadgets:assigned-to-me-gadget", "filterResults-thumb.png")'>
        <Optional feature="gadget-directory">
            <Param name="categories">
                JIRA
            </Param>
        </Optional>
        <Require feature="setprefs"/>
        <Require feature="settitle"/>
        <Require feature="dynamic-height"/>
        <Require feature="views"/>
        <Optional feature="atlassian.util"/>
        <Optional feature='auth-refresh'/>
        <Require feature="oauthpopup"/>
        #oauth
        #supportedLocales("gadget.common,gadget.issuetable,gadget.assignedtome,gadget.issuetable.common")
    </ModulePrefs>
    <UserPref name="num" datatype="hidden" default_value="10"/>
    <UserPref name="isConfigured" datatype="hidden" default_value="false"/>
    <UserPref name="columnNames" datatype="hidden" default_value="--Default--"/>
    <UserPref name="sortColumn" datatype="hidden" default_value=""/>
    <UserPref name="refresh" datatype="hidden" default_value="false"/>
    <!-- use of requireContext below is to invoke batching of files -->
    <Content type="html" view="profile,canvas,home">
        <![CDATA[
        #requireContext("jira.webresources:issue-table")
        #requireResource("com.atlassian.jira.gadgets:g-assigned-to-me")
        #includeResources()

        <script type="text/javascript">

            var contextPath = "__ATLASSIAN_BASE_URL__"; // Adding context path as it is required for actions dropdowns

            gadgets.window.setTitle("__MSG_gadget.assignedtome.title__");

            var gadget = AJS.Gadget({
                baseUrl: "__ATLASSIAN_BASE_URL__",
                useOauth: "/rest/gadget/1.0/currentUser",
                config: {
                    descriptor: function (args) {
                        var gadget = this;

                        return {
                            action: "/rest/gadget/1.0/issueTable/jql/validate",
                            theme : function() {
                                if (gadgets.window.getViewportDimensions().width < 450) {
                                    return "gdt top-label";
                                } else {
                                    return "gdt";
                                }
                            }(),
                            fields: [
                                AJS.gadget.fields.numberToShow(gadget, "num"),
                                columnGadgetFieldType(gadget, "columnNames", args.columnChoices.availableColumns),
                                AJS.gadget.fields.nowConfigured()

                            ]
                        };
                    },
                    args: [
                        {
                            key: "columnChoices",
                            ajaxOptions:  "/rest/gadget/1.0/availableColumns"
                        }
                    ]
                },
                view: {
                    onResizeAdjustHeight: true,
                    enableReload: true,
                    template: function (args) {
                        var gadget = this;

                        args.linkHtml = "<a href=\"__ATLASSIAN_BASE_URL__/secure/IssueNavigator.jspa?reset=true&jqlQuery=assignee+%3D+currentUser%28%29+AND+resolution+%3D+unresolved+ORDER+BY+priority+DESC%2C+created+ASC\" target=\"_parent\" title=\"__MSG_gadget.assignedtome.title__\">";
                        args.linkEndHtml = "</a>";
                        args.issueTable.empty = args.issueTable.displayed === 0;
                        args.issueTable.hasPaging = args.issueTable.displayed === args.issueTable.total;

                        gadget.getView().attr("id", "assigned-to-me-content")
                                .html(JIRA.Templates.Gadgets.assignedToMe(args));

                        var $resultCountLink = gadget.getView().find(".results-count-link");
                        $resultCountLink.replaceWith(AJS.$(args.linkHtml + $resultCountLink.html() + args.linkEndHtml));

                        AJS.$("th.sortable").each(
                                function() {
                                    this.onclick = null;
                                }).click(function() {
                            gadget.savePref("sortColumn", AJS.$(this).attr("rel"));
                            gadget.sortBy = AJS.$(this).attr("rel");
                            gadget.showView(true);
                        });

                        AJS.$(".pagination a").click(function(event) {
                            event.preventDefault();
                            gadget.startIndex = AJS.$(this).attr("rel");
                            gadget.showView(true);
                        });

                        if (gadget.isLocal()) {

                            if (typeof contextPath === "undefined") {
                                contextPath = "__ATLASSIAN_BASE_URL__";
                            }

                            AJS.Dropdown.create({
                                trigger: ".issue-actions-trigger",
                                autoScroll: false,
                                ajaxOptions: {
                                    dataType: "json",
                                    cache: false,
                                    formatSuccess: JIRA.FRAGMENTS.issueActionsFragment
                                }
                            });
                        }

                        // Apply hover class to issuetable
                        jQuery("#issuetable tr").hover(function () {
                            jQuery(this).addClass("hover");
                        }, function () {
                            if (!AJS.dropDown.current) {
                                jQuery(this).removeClass("hover");
                            }
                        });
                    },

                    args: [
                        {
                            key: "issueTable",

                            ajaxOptions: function () {
                                var gadget = this;

                                // This code to handle --Default-- needs to stay for
                                // gadgets that were configured before it was removed.
                                var columnNames = gadget.getPrefArray("columnNames");
                                var hasDefault = false;
                                var indexOf = -1;
                                for (var i = 0; i < columnNames.length; i++) {
                                    if (columnNames[i] === "--Default--") {
                                        hasDefault = true;
                                        indexOf = i;
                                        break;
                                    }
                                }
                                if (hasDefault) {
                                    columnNames.splice(indexOf, 1);
                                }

                                if (!this.sortBy) {
                                    this.sortBy = gadget.getPref("sortColumn") || null;
                                }
                                return {
                                    url: "/rest/gadget/1.0/issueTable/jql",
                                    data:  {
                                        jql: "assignee = currentUser() AND resolution = unresolved ORDER BY priority DESC, created ASC",
                                        num: this.getPref("num"),
                                        addDefault : hasDefault,
                                        columnNames : columnNames,
                                        enableSorting: true,
                                        sortBy: function() {
                                            if (gadget.sortBy && gadget.sortBy !== "") {
                                                return gadget.sortBy;
                                            } else {
                                                return null;
                                            }
                                        }(),
                                        paging: true,
                                        startIndex: function () {
                                            if (gadget.startIndex && gadget.startIndex !== "") {
                                                return gadget.startIndex;
                                            } else {
                                                return "0";
                                            }
                                        }(),
                                        showActions: gadget.isLocal()
                                    }
                                };
                            }

                        }
                    ]
                }
            });
        </script>
        ]]>
    </Content>
</Module>
